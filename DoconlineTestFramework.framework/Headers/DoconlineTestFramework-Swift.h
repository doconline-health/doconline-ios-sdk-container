#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef DOCONLINETESTFRAMEWORK_SWIFT_H
#define DOCONLINETESTFRAMEWORK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreData;
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ImageSlideshow;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#import <DoconlineTestFramework/DoconlineTestFramework.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DoconlineTestFramework",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS("_TtC22DoconlineTestFramework10AllDayView")
@interface AllDayView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayoutAttributes;

/// A <code>UICollectionViewFlowLayout</code> subclass enables custom transitions between cells.
SWIFT_CLASS("_TtC22DoconlineTestFramework28AnimatedCollectionViewLayout")
@interface AnimatedCollectionViewLayout : UICollectionViewFlowLayout
/// Overrided so that we can store extra information in the layout attributes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layoutAttributesClass;)
+ (Class _Nonnull)layoutAttributesClass SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom layout attributes that contains extra information.
SWIFT_CLASS("_TtC22DoconlineTestFramework38AnimatedCollectionViewLayoutAttributes")
@interface AnimatedCollectionViewLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIBarButtonItem;
@class PHAsset;
@class PHAssetCollection;
@class UIViewController;
@class NSString;
@class NSBundle;

/// BSImagePickerViewController.
/// Use settings or buttons to customize it to your needs.
SWIFT_CLASS("_TtC22DoconlineTestFramework27BSImagePickerViewController")
@interface BSImagePickerViewController : UINavigationController
/// Done button.
@property (nonatomic, strong) UIBarButtonItem * _Nonnull doneButton;
/// Cancel button
@property (nonatomic, strong) UIBarButtonItem * _Nonnull cancelButton;
/// Default selections
@property (nonatomic, strong) PHFetchResult<PHAsset *> * _Nullable defaultSelections;
/// Fetch results.
@property (nonatomic, copy) NSArray<PHFetchResult<PHAssetCollection *> *> * _Nonnull fetchResults;
/// Sets up an classic image picker with results from camera roll and albums
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// https://www.youtube.com/watch?v=dQw4w9WgXcQ
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load view. See apple documentation
- (void)loadView;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIButton;

@interface BSImagePickerViewController (SWIFT_EXTENSION(DoconlineTestFramework))
/// Album button in title view
@property (nonatomic, strong) UIButton * _Nonnull albumButton;
@end

@class UIColor;
@class UIImage;

@interface BSImagePickerViewController (SWIFT_EXTENSION(DoconlineTestFramework))
/// See BSImagePicketSettings for documentation
@property (nonatomic) NSInteger maxNumberOfSelections;
/// See BSImagePicketSettings for documentation
@property (nonatomic, strong) UIColor * _Nonnull selectionFillColor;
/// See BSImagePicketSettings for documentation
@property (nonatomic, strong) UIColor * _Nonnull selectionStrokeColor;
/// See BSImagePicketSettings for documentation
@property (nonatomic, strong) UIColor * _Nonnull selectionShadowColor;
/// See BSImagePicketSettings for documentation
@property (nonatomic, copy) NSDictionary<NSAttributedStringKey, id> * _Nonnull selectionTextAttributes;
/// BackgroundColor
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// See BSImagePicketSettings for documentation
@property (nonatomic, copy) NSInteger (^ _Nonnull cellsPerRow)(UIUserInterfaceSizeClass, UIUserInterfaceSizeClass);
/// See BSImagePicketSettings for documentation
@property (nonatomic) BOOL takePhotos;
@property (nonatomic, strong) UIImage * _Nullable takePhotoIcon;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework11BSImageView")
@interface BSImageView : UIView
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic) UIViewContentMode contentMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface BSImageView (SWIFT_EXTENSION(DoconlineTestFramework))
/// See UIImageView documentation
@property (nonatomic, strong) IBInspectable UIImage * _Nullable image;
/// See UIImageView documentation
@property (nonatomic, strong) IBInspectable UIImage * _Nullable highlightedImage;
/// See UIImageView documentation
@property (nonatomic) IBInspectable BOOL isHighlighted;
@end






@class UITouch;
@class UIEvent;

/// A star rating view that can be used to show customer rating for the products. On can select stars by tapping on them when updateOnTouch settings is true. An optional text can be supplied that is shown on the right side.
/// Example:
/// cosmosView.rating = 4
/// cosmosView.text = “(123)”
/// Shows: ★★★★☆ (123)
IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework10CosmosView")
@interface CosmosView : UIView
/// The currently shown number of stars, usually between 1 and 5. If the value is decimal the stars will be shown according to the Fill Mode setting.
@property (nonatomic) IBInspectable double rating;
/// Currently shown text. Set it to nil to display just the stars without text.
@property (nonatomic, copy) IBInspectable NSString * _Nullable text;
/// Draws the stars when the view comes out of storyboard with default settings
- (void)awakeFromNib;
/// Initializes and returns a newly allocated cosmos view object with the specified frame rectangle.
/// \param frame The frame rectangle for the view.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Initializes and returns a newly allocated cosmos view object.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the content size to fit all the star and text layers.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Called by the system in accessibility voice-over mode when the value is incremented by the user.
- (void)accessibilityIncrement;
/// Called by the system in accessibility voice-over mode when the value is decremented by the user.
- (void)accessibilityDecrement;
/// Overriding the function to detect the first touch gesture.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Overriding the function to detect touch move.
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Detecting event when the user lifts their finger.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Detecting event when the touches are cancelled (can happen in a scroll view).
/// Behave as if user has lifted their finger.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Increase the hitsize of the view if it’s less than 44px for easier touching.
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Draw the stars in interface buidler
- (void)prepareForInterfaceBuilder;
@end



SWIFT_CLASS("_TtC22DoconlineTestFramework16DatePickerDialog")
@interface DatePickerDialog : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework13DayHeaderView")
@interface DayHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end





SWIFT_CLASS("_TtC22DoconlineTestFramework7DayView")
@interface DayView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end




@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC22DoconlineTestFramework17DayViewController")
@interface DayViewController : UIViewController
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

SWIFT_CLASS("_TtC22DoconlineTestFramework11DoconlineVC")
@interface DoconlineVC : UIViewController
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)getIncomingPushCreds:(NSNotification * _Nonnull)notification;
- (void)getIncomingFcmTokenSet:(NSNotification * _Nonnull)notification;
- (void)getIncomingPushPayload:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework9EventView")
@interface EventView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework26FlexibleSteppedProgressBar")
@interface FlexibleSteppedProgressBar : UIView
/// The number of displayed points in the component
@property (nonatomic) IBInspectable NSInteger numberOfPoints;
/// The line height between points
@property (nonatomic) IBInspectable CGFloat lineHeight;
/// The point’s radius
@property (nonatomic) IBInspectable CGFloat radius;
/// The progress points’s raduis
@property (nonatomic) IBInspectable CGFloat progressRadius;
/// The progress line height between points
@property (nonatomic) IBInspectable CGFloat progressLineHeight;
/// The selection animation duration
@property (nonatomic) IBInspectable CFTimeInterval stepAnimationDuration;
/// True if some text should be rendered in the step points. The text value is provided by the delegate
@property (nonatomic) IBInspectable BOOL displayStepText;
/// The component’s background color
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull backgroundShapeColor;
/// The component selected background color
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedBackgoundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)drawRect:(CGRect)rect;
@end

enum FlexibleSteppedProgressBarTextLocation : NSInteger;

SWIFT_PROTOCOL("_TtP22DoconlineTestFramework34FlexibleSteppedProgressBarDelegate_")
@protocol FlexibleSteppedProgressBarDelegate
@optional
- (void)progressBar:(FlexibleSteppedProgressBar * _Nonnull)progressBar willSelectItemAtIndex:(NSInteger)index;
- (void)progressBar:(FlexibleSteppedProgressBar * _Nonnull)progressBar didSelectItemAtIndex:(NSInteger)index;
- (BOOL)progressBar:(FlexibleSteppedProgressBar * _Nonnull)progressBar canSelectItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)progressBar:(FlexibleSteppedProgressBar * _Nonnull)progressBar textAtIndex:(NSInteger)index position:(enum FlexibleSteppedProgressBarTextLocation)position SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FlexibleSteppedProgressBarTextLocation, open) {
  FlexibleSteppedProgressBarTextLocationTop = 0,
  FlexibleSteppedProgressBarTextLocationBottom = 1,
  FlexibleSteppedProgressBarTextLocationCenter = 2,
};

@class NSIndexPath;

/// Provides a grid collection view layout
SWIFT_CLASS("_TtC22DoconlineTestFramework24GridCollectionViewLayout")
@interface GridCollectionViewLayout : UICollectionViewLayout
- (void)prepareLayout;
/// See UICollectionViewLayout documentation
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/// See UICollectionViewLayout documentation
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// See UICollectionViewLayout documentation
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// See UICollectionViewLayout documentation
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// See UICollectionViewLayout documentation
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// See UICollectionViewLayout documentation
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// <code>IQAutoToolbarBySubviews</code>
/// Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// <code>IQAutoToolbarByTag</code>
/// Creates Toolbar according to tag property of TextField’s.
/// <code>IQAutoToolbarByPosition</code>
/// Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
typedef SWIFT_ENUM(NSInteger, IQAutoToolbarManageBehaviour, open) {
  IQAutoToolbarManageBehaviourBySubviews = 0,
  IQAutoToolbarManageBehaviourByTag = 1,
  IQAutoToolbarManageBehaviourByPosition = 2,
};

@class IQInvocation;

SWIFT_CLASS("_TtC22DoconlineTestFramework15IQBarButtonItem")
@interface IQBarButtonItem : UIBarButtonItem
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Additional target & action to do get callback action. Note that setting custom target & selector doesn’t affect native functionality, this is just an additional target to get a callback.
/// @param target Target object.
/// @param action Target Selector.
- (void)setTarget:(id _Nullable)target action:(SEL _Nullable)action;
/// Customized Invocation to be called when button is pressed. invocation is internally created using setTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
@end


/// IQBarButtonItemConfiguration for creating toolbar with bar button items
SWIFT_CLASS("_TtC22DoconlineTestFramework28IQBarButtonItemConfiguration")
@interface IQBarButtonItemConfiguration : NSObject
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)barButtonSystemItem action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) SEL _Nullable action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>IQEnableModeDefault</code>
/// Pick default settings.
/// <code>IQEnableModeEnabled</code>
/// setting is enabled.
/// <code>IQEnableModeDisabled</code>
/// setting is disabled.
typedef SWIFT_ENUM(NSInteger, IQEnableMode, open) {
  IQEnableModeDefault = 0,
  IQEnableModeEnabled = 1,
  IQEnableModeDisabled = 2,
};


SWIFT_CLASS("_TtC22DoconlineTestFramework12IQInvocation")
@interface IQInvocation : NSObject
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nonnull action;
- (nonnull instancetype)init:(id _Nonnull)target :(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (void)invokeFrom:(id _Nonnull)from;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IQPreviousNextDisplayMode : NSInteger;
@class UIFont;
@class UITapGestureRecognizer;
@class UIGestureRecognizer;

/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC22DoconlineTestFramework17IQKeyboardManager")
@interface IQKeyboardManager : NSObject <UIGestureRecognizerDelegate>
/// Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).
@property (nonatomic) BOOL enable;
/// To set keyboard distance from textField. can’t be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// Boolean to know if keyboard is showing.
@property (nonatomic, readonly) BOOL keyboardShowing;
/// moved distance to the top used to maintain distance between keyboard and textField. Most of the time this will be a positive value.
@property (nonatomic, readonly) CGFloat movedDistance;
/// Will be called then movedDistance will be changed
@property (nonatomic, copy) void (^ _Nullable movedDistanceChanged)(CGFloat);
/// Returns the default singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IQKeyboardManager * _Nonnull shared;)
+ (IQKeyboardManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Automatic add the IQToolbar functionality. Default is YES.
@property (nonatomic) BOOL enableAutoToolbar;
/// /**
/// IQAutoToolbarBySubviews:   Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// IQAutoToolbarByTag:        Creates Toolbar according to tag property of TextField’s.
/// IQAutoToolbarByPosition:   Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
/// Default is IQAutoToolbarBySubviews.
/// */
/// AutoToolbar managing behaviour. Default is IQAutoToolbarBySubviews.
@property (nonatomic) enum IQAutoToolbarManageBehaviour toolbarManageBehaviour;
/// If YES, then uses textField’s tintColor property for IQToolbar, otherwise tint color is default. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;
/// This is used for toolbar.tintColor when textfield.keyboardAppearance is UIKeyboardAppearanceDefault. If shouldToolbarUsesTextFieldTintColor is YES then this property is ignored. Default is nil and uses black color.
@property (nonatomic, strong) UIColor * _Nullable toolbarTintColor;
/// This is used for toolbar.barTintColor. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable toolbarBarTintColor;
/// IQPreviousNextDisplayModeDefault:      Show NextPrevious when there are more than 1 textField otherwise hide.
/// IQPreviousNextDisplayModeAlwaysHide:   Do not show NextPrevious buttons in any case.
/// IQPreviousNextDisplayModeAlwaysShow:   Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
@property (nonatomic) enum IQPreviousNextDisplayMode previousNextDisplayMode;
/// Toolbar previous/next/done button icon, If nothing is provided then check toolbarDoneBarButtonItemText to draw done button.
@property (nonatomic, strong) UIImage * _Nullable toolbarPreviousBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarNextBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarDoneBarButtonItemImage;
/// Toolbar previous/next/done button text, If nothing is provided then system default ‘UIBarButtonSystemItemDone’ will be used.
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemAccessibilityLabel;
/// If YES, then it add the textField’s placeholder text on IQToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowToolbarPlaceholder;
/// Placeholder Font. Default is nil.
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// Placeholder Color. Default is nil. Which means lightGray
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// Placeholder Button Color when it’s treated as button. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable placeholderButtonColor;
/// Override the keyboardAppearance for all textField/textView. Default is NO.
@property (nonatomic) BOOL overrideKeyboardAppearance;
/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// Resigns Keyboard on touching outside of UITextField/View. Default is NO.
@property (nonatomic) BOOL shouldResignOnTouchOutside;
/// TapGesture to resign keyboard on view’s touch. It’s a readonly property and exposed only for adding/removing dependencies if your added gesture does have collision with this one
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull resignFirstResponderGesture;
/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;
/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;
/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;
/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;
/// Navigate to next responder textField/textView.
- (BOOL)goNext;
/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture’s delegate may return YES.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// If YES, then it plays inputClick sound on next/previous/done click.
@property (nonatomic) BOOL shouldPlayInputClicks;
/// If YES, then calls ‘setNeedsLayout’ and ‘layoutIfNeeded’ on any frame update of to viewController’s view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;
/// Disable distance handling within the scope of disabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledDistanceHandlingClasses;
/// Enable distance handling within the scope of enabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledDistanceHandlingClasses list, then enabledDistanceHandlingClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledDistanceHandlingClasses;
/// Disable automatic toolbar creation within the scope of disabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledToolbarClasses;
/// Enable automatic toolbar creation within the scope of enabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledToolbarClasses list, then enabledToolbarClasses will be ignore.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledToolbarClasses;
/// Allowed subclasses of UIView to add all inner textField, this will allow to navigate between textField contains in different superview. Class should be kind of UIView.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull toolbarPreviousNextAllowedClasses;
/// Disabled classes to ignore ‘shouldResignOnTouchOutside’ property, Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledTouchResignedClasses;
/// Enabled classes to forcefully enable ‘shouldResignOnTouchOutsite’ property. Class should be kind of UIViewController. If same Class is added in disabledTouchResignedClasses list, then enabledTouchResignedClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledTouchResignedClasses;
/// if shouldResignOnTouchOutside is enabled then you can customise the behaviour to not recognise gesture touches on some specific view subclasses. Class should be kind of UIView. Default is [UIControl, UINavigationBar]
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull touchResignedGestureIgnoreClasses;
/// Add/Remove customised Notification for third party customised TextField/TextView. Please be aware that the Notification object must be idential to UITextField/UITextView Notification objects and customised TextField/TextView support must be idential to UITextField/UITextView.
/// @param didBeginEditingNotificationName This should be identical to UITextViewTextDidBeginEditingNotification
/// @param didEndEditingNotificationName This should be identical to UITextViewTextDidEndEditingNotification
- (void)registerTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (void)unregisterTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)reloadLayoutIfNeeded;
/// reloadInputViews to reload toolbar buttons enable/disable state on the fly Enhancement ID #434.
- (void)reloadInputViews;
/// <hr/>
/// <h2>MARK: Debugging & Developer options</h2>
@property (nonatomic) BOOL enableDebugging;
/// @warning Use below methods to completely enable/disable notifications registered by library internally. Please keep in mind that library is totally dependent on NSNotification of UITextField, UITextField, Keyboard etc. If you do unregisterAllNotifications then library will not work at all. You should only use below methods if you want to completedly disable all library functions. You should use below methods at your own risk.
- (void)registerAllNotifications;
- (void)unregisterAllNotifications;
@end

@class UITextField;
@class UITextView;
@class NSURL;
@class NSTextAttachment;

/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC22DoconlineTestFramework26IQKeyboardReturnKeyHandler")
@interface IQKeyboardReturnKeyHandler : NSObject <UITextFieldDelegate, UITextViewDelegate>
/// Delegate of textField/textView.
@property (nonatomic, weak) id <UITextFieldDelegate, UITextViewDelegate> _Nullable delegate;
/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;
/// <hr/>
/// <h2>MARK: Initialization/Deinitialization</h2>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add all the textFields available in UIViewController’s view.
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller OBJC_DESIGNATED_INITIALIZER;
/// Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it’s returnKeyType.
/// @param view UITextField/UITextView object to register.
- (void)addTextFieldView:(UIView * _Nonnull)view;
/// Should pass UITextField/UITextView intance. Restore it’s textFieldView delegate and it’s returnKeyType.
/// @param view UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * _Nonnull)view;
/// Add all the UITextField/UITextView responderView’s.
/// @param view UIView object to register all it’s responder subviews.
- (void)addResponderFromView:(UIView * _Nonnull)view;
/// Remove all the UITextField/UITextView responderView’s.
/// @param view UIView object to unregister all it’s responder subviews.
- (void)removeResponderFromView:(UIView * _Nonnull)view;
/// <hr/>
/// <h2>MARK: UITextField/UITextView delegates</h2>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end

/// <code>IQPreviousNextDisplayModeDefault</code>
/// Show NextPrevious when there are more than 1 textField otherwise hide.
/// <code>IQPreviousNextDisplayModeAlwaysHide</code>
/// Do not show NextPrevious buttons in any case.
/// <code>IQPreviousNextDisplayModeAlwaysShow</code>
/// Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
typedef SWIFT_ENUM(NSInteger, IQPreviousNextDisplayMode, open) {
  IQPreviousNextDisplayModeDefault = 0,
  IQPreviousNextDisplayModeAlwaysHide = 1,
  IQPreviousNextDisplayModeAlwaysShow = 2,
};


SWIFT_CLASS("_TtC22DoconlineTestFramework18IQPreviousNextView")
@interface IQPreviousNextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;
@class NSAttributedString;

/// @abstract UITextView with placeholder support
SWIFT_CLASS("_TtC22DoconlineTestFramework10IQTextView")
@interface IQTextView : UITextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// @abstract To set textView’s placeholder text color.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable placeholderTextColor;
/// @abstract To set textView’s placeholder text. Default is nil.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, strong) id <UITextViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework20IQTitleBarButtonItem")
@interface IQTitleBarButtonItem : IQBarButtonItem
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic, copy) NSString * _Nullable title;
/// titleColor to be used for displaying button text when displaying title (disabled state).
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// selectableTitleColor to be used for displaying button text when button is enabled.
@property (nonatomic, strong) UIColor * _Nullable selectableTitleColor;
/// Customized Invocation to be called on title button action. titleInvocation is internally created using setTitleTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// @abstract   IQToolbar for IQKeyboardManager.
SWIFT_CLASS("_TtC22DoconlineTestFramework9IQToolbar")
@interface IQToolbar : UIToolbar <UIInputViewAudioFeedback>
@property (nonatomic, strong) IQBarButtonItem * _Nonnull previousBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull nextBarButton;
@property (nonatomic, strong) IQTitleBarButtonItem * _Nonnull titleBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull doneBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull fixedSpaceBarButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework25ImageCollectionViewLayout")
@interface ImageCollectionViewLayout : UICollectionViewFlowLayout
@property (nonatomic) IBInspectable CGFloat sideItemScale;
@property (nonatomic) IBInspectable CGFloat sideItemAlpha;
- (void)prepareLayout;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIImageView;
@class JJCircleView;
enum JJActionItemTitlePosition : NSInteger;

/// The item view representing an action.
IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework12JJActionItem")
@interface JJActionItem : UIControl
/// The action that is executed when the item is tapped.
/// Default is <code>nil</code>.
/// \param item The action item that has been tapped.
///
@property (nonatomic, copy) void (^ _Nullable action)(JJActionItem * _Nonnull);
/// Calls the action on the action item.
- (void)callAction;
/// The color of action item circle view.
/// Default is <code>UIColor.white</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColor;
/// The color of action item circle view with highlighted state.
/// Default is <code>nil</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nullable highlightedButtonColor;
/// The image displayed by the item.
/// Default is <code>nil</code>.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) IBInspectable UIImage * _Nullable buttonImage;
/// The tint color of the image view.
/// By default the color of the floating action button is used.
/// warning:
/// Only template images are colored.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonImageColor;
/// The title label of the item. Can be configured as needed.
/// Read only.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// The image view of the item. Can be configured as needed.
/// Read only.
/// seealso:
/// <code>buttonImage</code>
/// seealso:
/// <code>buttonImageColor</code>
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The background circle of the item. Can be configured as needed.
/// Read only.
/// seealso:
/// <code>buttonColor</code>
/// seealso:
/// <code>highlightedButtonColor</code>
@property (nonatomic, readonly, strong) JJCircleView * _Nonnull circleView;
/// The position of the title label. Default is <code>.leading</code>.
@property (nonatomic) enum JJActionItemTitlePosition titlePosition;
/// The position of the title label. Default is <code>-1</code>.
/// When <code>titleSpacing</code> is negative default spacing is used:
/// Default horizontal spacing is <code>12</code>.
/// Default vertical spacing is <code>4</code>.
@property (nonatomic) CGFloat titleSpacing;
/// The size of the image view. Default is <code>(0, 0)</code>.
/// When imageSize is <code>.zero</code> the image is shrunken until it fits
/// completely into the circle view. If it already does the actual
/// size of the image is used.
@property (nonatomic) CGSize imageSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface JJActionItem (SWIFT_EXTENSION(DoconlineTestFramework))
/// A Boolean value indicating whether the action item draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


@interface JJActionItem (SWIFT_EXTENSION(DoconlineTestFramework))
/// Tells the view that its superview changed.
- (void)didMoveToSuperview;
/// Updates constraints for the view.
- (void)updateConstraints;
@end




/// Action item title position.
typedef SWIFT_ENUM(NSInteger, JJActionItemTitlePosition, open) {
/// Place the title at the leading edge of the circle view.
  JJActionItemTitlePositionLeading = 0,
/// Place the title at the trailing edge of the circle view.
  JJActionItemTitlePositionTrailing = 1,
/// Place the title at the left edge of the circle view.
  JJActionItemTitlePositionLeft = 2,
/// Place the title at the right edge of the circle view.
  JJActionItemTitlePositionRight = 3,
/// Place the title at the top edge of the circle view.
  JJActionItemTitlePositionTop = 4,
/// Place the title at the bottom edge of the circle view.
  JJActionItemTitlePositionBottom = 5,
/// Hide the title all together.
  JJActionItemTitlePositionHidden = 6,
};


/// General animation configuration settings
SWIFT_CLASS("_TtC22DoconlineTestFramework19JJAnimationSettings")
@interface JJAnimationSettings : NSObject
/// Duration of the animation.
/// Default is <code>0.3</code>
@property (nonatomic) NSTimeInterval duration;
/// Damping ratio of the animation.
/// Default is <code>0.55</code>
/// remark:
/// Not used for transitions.
@property (nonatomic) CGFloat dampingRatio;
/// Initial velocity of the animation.
/// Default is <code>0.3</code>
/// remark:
/// Not used for transitions.
@property (nonatomic) CGFloat initialVelocity;
/// Delay in between two item animations.
/// Default is <code>0.1</code>
/// remark:
/// Only used for item animations.
@property (nonatomic) NSTimeInterval interItemDelay;
/// Initializes and returns a newly allocated animation settings object with specified parameters.
/// \param duration Duration of the animation. Default is <code>0.3</code>.
///
/// \param dampingRatio Damping ratio of the animation. Default is <code>0.55</code>
///
/// \param initialVelocity Initial velocity of the animation. Default is <code>0.3</code>
///
/// \param interItemDelay Delay in between two item animations. Default is <code>0.1</code>
///
///
/// returns:
/// An initialized animation settings object.
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)dampingRatio initialVelocity:(CGFloat)initialVelocity interItemDelay:(NSTimeInterval)interItemDelay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum JJButtonAnimationStyle : NSInteger;

/// Button animation configuration
SWIFT_CLASS("_TtC22DoconlineTestFramework30JJButtonAnimationConfiguration")
@interface JJButtonAnimationConfiguration : NSObject
/// Initializes and returns a newly allocated button animation configuration object with the specified style.
/// \param style The animation style.
///
///
/// returns:
/// An initialized button animation configuration object.
- (nonnull instancetype)initWithStyle:(enum JJButtonAnimationStyle)style OBJC_DESIGNATED_INITIALIZER;
/// Button animation style
/// Possible values:
/// <ul>
///   <li>
///     <code>.rotation</code>
///   </li>
///   <li>
///     <code>.transition</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum JJButtonAnimationStyle style;
/// The angle in radian the button will rotate to when opening.
/// remark:
/// Is ignored for style <code>.rotation</code>
@property (nonatomic) CGFloat angle;
/// The image button will transition to when opening.
/// remark:
/// Is ignored for style <code>.transition</code>
@property (nonatomic, strong) UIImage * _Nullable image;
/// Animation settings for opening animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.55</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.3</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull opening;
/// Animation settings for closing animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.6</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.8</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull closing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Button animation style
typedef SWIFT_ENUM(NSInteger, JJButtonAnimationStyle, open) {
/// Rotate button image to given angle.
  JJButtonAnimationStyleRotation = 0,
/// Transition to given image.
  JJButtonAnimationStyleTransition = 1,
};


@interface JJButtonAnimationConfiguration (SWIFT_EXTENSION(DoconlineTestFramework))
/// Returns a button animation configuration that rotates the button image by given angle.
/// \param angle The angle in radian the button will rotate to when opening.
///
///
/// returns:
/// A button animation configuration object.
+ (JJButtonAnimationConfiguration * _Nonnull)rotationToAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Returns a button animation configuration that transitions to a given image.
/// \param image The image button will transition to when opening.
///
///
/// returns:
/// A button animation configuration object.
+ (JJButtonAnimationConfiguration * _Nonnull)transitionToImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end


/// A colored circle with an highlighted state
IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework12JJCircleView")
@interface JJCircleView : UIView
/// The color of the circle.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull color;
/// The color of the circle when highlighted. Default is <code>nil</code>.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable highlightedColor;
/// A Boolean value indicating whether the circle view draws a highlight.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isHighlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draws the receiver’s image within the passed-in rectangle
/// Overrides <code>draw(rect: CGRect)</code> from <code>UIView</code>.
- (void)drawRect:(CGRect)_;
@end


@protocol JJFloatingActionButtonDelegate;
enum JJFloatingActionButtonState : NSInteger;

/// A floating action button.
/// \code
/// let actionButton = JJFloatingActionButton()
///
/// actionButton.addItem(title: "item 1", image: image1) { item in
///     // do something
/// }
///
/// actionButton.addItem(title: "item 2", image: image2) { item in
///     // do something
/// }
///
/// view.addSubview(actionButton)
///
/// \endcode
IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework22JJFloatingActionButton")
@interface JJFloatingActionButton : UIControl
/// The delegate object for the floating action button.
@property (nonatomic, weak) id <JJFloatingActionButtonDelegate> _Nullable delegate;
/// The list of action items.
/// Default is <code>[]</code>.
/// seealso:
/// <code>enabledItems</code>
@property (nonatomic, copy) NSArray<JJActionItem *> * _Nonnull items;
/// The background color of the floating action button.
/// Default is <code>UIColor(hue: 0.31, saturation: 0.37, brightness: 0.76, alpha: 1.00)</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColor;
/// The background color of the floating action button with highlighted state.
/// Default is <code>nil</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nullable highlightedButtonColor;
/// The image displayed on the button by default.
/// When only one <code>JJActionItem</code> is added and <code>handleSingleActionDirectly</code> is enabled,
/// the image from the item is shown instead.
/// When set to <code>nil</code> an image of a plus sign is used.
/// Default is <code>nil</code>.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) IBInspectable UIImage * _Nullable buttonImage;
/// The size of the image view.
/// Default is <code>CGSize.zero</code>.
/// If set to <code>.zero</code> the actual size of the image is used.
/// seealso:
/// <code>imageView</code>
@property (nonatomic) CGSize buttonImageSize;
/// The tint color of the image view.
/// Default is <code>UIColor.white</code>.
/// warning:
/// Only template images are colored.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonImageColor;
/// The default diameter of the floating action button.
/// This is ignored if the size is defined by auto-layout.
/// Default is <code>56</code>.
@property (nonatomic) IBInspectable CGFloat buttonDiameter;
/// The size of an action item in relation to the floating action button.
/// Default is <code>0.75</code>.
@property (nonatomic) IBInspectable CGFloat itemSizeRatio;
/// When enabled and only one action item is added, the floating action button will not open,
/// but the action from the action item will be executed directly when the button is tapped.
/// Also the image of the floating action button will be replaced with the one from the action item.
/// Default is <code>true</code>.
@property (nonatomic) IBInspectable BOOL handleSingleActionDirectly;
/// When enabled, the floating action button will close after an action item was tapped,
/// otherwise the action button will stay open and has to be closed explicitly.
/// Default is <code>true</code>.
/// seealso:
/// <code>close</code>
@property (nonatomic) IBInspectable BOOL closeAutomatically;
/// The current state of the floating action button.
/// Possible values are
/// <ul>
///   <li>
///     <code>.opening</code>
///   </li>
///   <li>
///     <code>.open</code>
///   </li>
///   <li>
///     <code>.closing</code>
///   </li>
///   <li>
///     <code>.closed</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum JJFloatingActionButtonState buttonState;
/// The round background view of the floating action button.
/// Read only.
/// seealso:
/// <code>buttonColor</code>
/// seealso:
/// <code>highlightedButtonColor</code>
@property (nonatomic, readonly, strong) JJCircleView * _Nonnull circleView;
/// The image view of the floating action button.
/// Read only.
/// warning:
/// Setting the image of the <code>imageView</code> directly will not work.
/// Use <code>buttonImage</code> instead.
/// seealso:
/// <code>buttonImage</code>
/// seealso:
/// <code>buttonImageColor</code>
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The overlay view.
/// Default background color is <code>UIColor(white: 0, alpha: 0.5)</code>.
/// Read only.
@property (nonatomic, readonly, strong) UIControl * _Nonnull overlayView;
/// Initializes and returns a newly allocated floating action button object with the specified frame rectangle.
/// seealso:
/// init?(coder: NSCoder)
/// \param frame The frame rectangle for the floating action button, measured in points.
/// The origin of the frame is relative to the superview in which you plan to add it.
/// This method uses the frame rectangle to set the center and bounds properties accordingly.
///
///
/// returns:
/// An initialized floating action button object.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated floating action button object with the specified image and action.
/// seealso:
/// init(frame: CGRect)
/// \param image The image of the action item. Default is <code>nil</code>.
///
/// \param action The action handler of the action item. Default is <code>nil</code>.
///
///
/// returns:
/// An initialized floating action button object.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(void (^ _Nullable)(JJActionItem * _Nonnull))action;
@end




@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// Add floating action button to a given superview and place in trailing bottom corner.
/// remark:
/// On iOS prior to iOS 11 <code>safeAreaInset</code> is ignored.
/// \param superview The view to which the floating action button is added as a subview.
///
/// \param bottomInset The (minimum) bottom vertical spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param trailingInset The (minimum) trailing horizontal spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param safeAreaInset The (minimum) spacing in points between button and safe area of the superview.
/// Default is <code>0</code>.
///
- (void)displayInView:(UIView * _Nonnull)superview bottomInset:(CGFloat)bottomInset trailingInset:(CGFloat)trailingInset safeAreaInset:(CGFloat)safeAreaInset;
/// Add floating action button to a view of a given view controller and place in trailing bottom corner.
/// remark:
/// On iOS prior to iOS 11 <code>safeAreaInset</code> is ignored.
/// \param viewController The view controller to which view the floating action button is added as a subview.
///
/// \param bottomInset The (minimum) bottom vertical spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param trailingInset The (minimum) trailing horizontal spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param safeAreaInset The (minimum) spacing in points between button and safe area of the view controllers view.
/// Default is <code>0</code>.
///
- (void)displayInViewController:(UIViewController * _Nonnull)viewController bottomInset:(CGFloat)bottomInset trailingInset:(CGFloat)trailingInset safeAreaInset:(CGFloat)safeAreaInset;
@end


@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// Open the floating action button and show all action items.
/// remark:
/// Hidden items and items that have user interaction disabled are omitted.
/// seealso:
/// <code>buttonAnimationConfiguration</code>
/// seealso:
/// <code>itemAnimationConfiguration</code>
/// \param animated When true, button will be opened with an animation. Default is <code>true</code>.
///
/// \param completion Will be handled upon completion. Default is <code>nil</code>.
///
- (void)openWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Close the floating action button and hide all action items.
/// seealso:
/// <code>buttonAnimationConfiguration</code>
/// seealso:
/// <code>itemAnimationConfiguration</code>
/// \param animated When true, button will be close with an animation. Default is <code>true</code>.
///
/// \param completion Will be handled upon completion. Default is <code>nil</code>.
///
- (void)closeWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end


@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// A Boolean value indicating whether the action button draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end




@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// The natural size for the floating action button.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Updates constraints for the view.
- (void)updateConstraints;
/// Tells the view that its superview changed.
- (void)didMoveToSuperview;
@end





@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// Add an action item with title, image and action to the list of items.
/// The item will be pre configured with the default values.
/// \param title The title of the action item. Default is <code>nil</code>.
///
/// \param image The image of the action item. Default is <code>nil</code>.
///
/// \param action The action handler of the action item. Default is <code>nil</code>.
///
///
/// returns:
/// The item that was added. This can be configured after it has been added.
- (JJActionItem * _Nonnull)addItemWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image action:(void (^ _Nullable)(JJActionItem * _Nonnull))action;
/// Add an action item to the list of items.
/// The item will be updated with the default configuration values.
/// \param item The action item.
///
- (void)addItem:(JJActionItem * _Nonnull)item;
/// Remove an action item from the list of items.
/// \param item The action item.
///
///
/// returns:
/// The item that was removed. <code>nil</code> if <code>item</code> was not found.
- (JJActionItem * _Nullable)removeItem:(JJActionItem * _Nonnull)item;
/// Remove and returns the action item at the specified position in the list of items.
/// \param index The index of the action item. <code>index</code> must
/// be a valid index of the list of items.
///
///
/// returns:
/// The item that was removed.
- (JJActionItem * _Nonnull)removeItemAt:(NSInteger)index;
/// Calls the given closure on each item that is or was added to the floating action button.
/// Default is <code>nil</code>.
/// \code
/// let actionButton = JJFloatingActionButton()
///
/// actionButton.configureDefaultItem { item in
///     item.imageView.contentMode = .scaleAspectFill
///
///     item.titleLabel.font = .systemFont(ofSize: 14)
///
///     item.layer.shadowColor = UIColor.black.cgColor
///     item.layer.shadowOpacity = 0.3
///     item.layer.shadowOffset = CGSize(width: 1, height: 1)
///     item.layer.shadowRadius = 0
/// }
///
/// \endcode\param body A closure that takes an action item as a parameter.
///
- (void)configureDefaultItem:(void (^ _Nullable)(JJActionItem * _Nonnull))body;
/// All items that will be shown when floating action button is opened.
/// This excludes hidden items and items that have user interaction disabled.
@property (nonatomic, readonly, copy) NSArray<JJActionItem *> * _Nonnull enabledItems;
@end


@interface JJFloatingActionButton (SWIFT_EXTENSION(DoconlineTestFramework))
/// The shadow color of the floating action button.
/// Default is <code>UIColor.black</code>.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable shadowColor;
/// The shadow offset of the floating action button.
/// Default is <code>CGSize(width: 0, height: 1)</code>.
@property (nonatomic) IBInspectable CGSize shadowOffset;
/// The shadow opacity of the floating action button.
/// Default is <code>0.4</code>.
@property (nonatomic) IBInspectable float shadowOpacity;
/// The shadow radius of the floating action button.
/// Default is <code>2</code>.
@property (nonatomic) IBInspectable CGFloat shadowRadius;
@end



/// Floating action button delegate protocol
SWIFT_PROTOCOL("_TtP22DoconlineTestFramework30JJFloatingActionButtonDelegate_")
@protocol JJFloatingActionButtonDelegate
@optional
/// Is called before opening animation. Button state is .opening.
- (void)floatingActionButtonWillOpen:(JJFloatingActionButton * _Nonnull)button;
/// Is called after opening animation. Button state is .opened.
- (void)floatingActionButtonDidOpen:(JJFloatingActionButton * _Nonnull)button;
/// Is called before closing animation. Button state is .closing.
- (void)floatingActionButtonWillClose:(JJFloatingActionButton * _Nonnull)button;
/// Is called after closing animation. Button state is .closed.
- (void)floatingActionButtonDidClose:(JJFloatingActionButton * _Nonnull)button;
@end

/// Button state.
typedef SWIFT_ENUM(NSInteger, JJFloatingActionButtonState, open) {
/// No items are visible
  JJFloatingActionButtonStateClosed = 0,
/// Items are fully visible
  JJFloatingActionButtonStateOpen = 1,
/// During opening animation
  JJFloatingActionButtonStateOpening = 2,
/// During closing animation
  JJFloatingActionButtonStateClosing = 3,
};

@class JJItemLayout;
@class JJItemPreparation;

/// Item animation configuration
SWIFT_CLASS("_TtC22DoconlineTestFramework28JJItemAnimationConfiguration")
@interface JJItemAnimationConfiguration : NSObject
/// Animation settings for opening animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.55</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.3</code>
///   </li>
///   <li>
///     <code>interItemDelay = 0.1</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull opening;
/// Animation settings for closing animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.6</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.8</code>
///   </li>
///   <li>
///     <code>interItemDelay = 0.1</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull closing;
/// Defines the layout of the acton items when opened.
/// Default is a layout in a vertical line with 12 points inter item spacing
@property (nonatomic, strong) JJItemLayout * _Nonnull itemLayout;
/// Configures the items before opening. The change from open to closed state is animated.
/// Default is a scale by factor <code>0.4</code> and <code>item.alpha = 0</code>.
@property (nonatomic, strong) JJItemPreparation * _Nonnull closedState;
/// Configures the items for open state. The change from open to closed state is animated.
/// Default is <code>item.transform = .identity</code> and <code>item.alpha = 1</code>.
@property (nonatomic, strong) JJItemPreparation * _Nonnull openState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface JJItemAnimationConfiguration (SWIFT_EXTENSION(DoconlineTestFramework))
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .verticalLine()</code>
///   </li>
///   <li>
///     <code>closedState = .scale()</code>
///   </li>
/// </ul>
/// \param interItemSpacing The distance between two adjacent items. Default is <code>12</code>.
///
/// \param firstItemSpacing The distance between the action button and the first action item.
/// When <code>firstItemSpacing</code> is <code>0</code> or less <code>interItemSpacing</code> is used instead.
/// Default is <code>0</code>.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)popUpWithInterItemSpacing:(CGFloat)interItemSpacing firstItemSpacing:(CGFloat)firstItemSpacing SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .verticalLine()</code>
///   </li>
///   <li>
///     <code>closedState = .horizontalOffset()</code>
///   </li>
/// </ul>
/// \param interItemSpacing The distance between two adjacent items. Default is <code>12</code>.
///
/// \param firstItemSpacing The distance between the action button and the first action item.
/// When <code>firstItemSpacing</code> is <code>0</code> or less <code>interItemSpacing</code> is used instead.
/// Default is <code>0</code>.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)slideInWithInterItemSpacing:(CGFloat)interItemSpacing firstItemSpacing:(CGFloat)firstItemSpacing SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .circular()</code>
///   </li>
///   <li>
///     <code>closedState = .scale()</code>
///   </li>
/// </ul>
/// \param radius The distance between the center of an item and the center of the button itself.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)circularPopUpWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .circular()</code>
///   </li>
///   <li>
///     <code>closedState = .circularOffset()</code>
///   </li>
/// </ul>
/// \param radius The distance between the center of an item and the center of the button itself.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)circularSlideInWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
@end


/// Item layout
SWIFT_CLASS("_TtC22DoconlineTestFramework12JJItemLayout")
@interface JJItemLayout : NSObject
/// A closure that defines the layout of given action items relative to an action button.
@property (nonatomic, copy) void (^ _Nonnull layout)(NSArray<JJActionItem *> * _Nonnull, JJFloatingActionButton * _Nonnull);
/// Initializes and returns a newly allocated item layout object with given layout closure.
/// \param layout A closure that defines the the layout of given action items relative to an action button.
///
///
/// returns:
/// An initialized item layout object.
- (nonnull instancetype)initWithLayout:(void (^ _Nonnull)(NSArray<JJActionItem *> * _Nonnull, JJFloatingActionButton * _Nonnull))layout OBJC_DESIGNATED_INITIALIZER;
/// Returns an item layout object that places the items in a vertical line with given inter item spacing.
/// \param interItemSpacing The distance between two adjacent items.
///
/// \param firstItemSpacing The distance between the action button and the first action item.
/// When <code>firstItemSpacing</code> is 0 or less <code>interItemSpacing</code> is used instead.
/// Default is 0.
///
///
/// returns:
/// An item layout object.
+ (JJItemLayout * _Nonnull)verticalLineWithInterItemSpacing:(CGFloat)interItemSpacing firstItemSpacing:(CGFloat)firstItemSpacing SWIFT_WARN_UNUSED_RESULT;
/// Returns an item layout object that places the items in a circle around the action button with given radius.
/// \param radius The distance between the center of an item and the center of the button itself.
///
///
/// returns:
/// An item layout object.
+ (JJItemLayout * _Nonnull)circularWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Item preparation
SWIFT_CLASS("_TtC22DoconlineTestFramework17JJItemPreparation")
@interface JJItemPreparation : NSObject
/// A closure that prepares a given action item for animation.
@property (nonatomic, copy) void (^ _Nonnull prepare)(JJActionItem * _Nonnull, NSInteger, NSInteger, JJFloatingActionButton * _Nonnull);
/// Initializes and returns a newly allocated item preparation object with given prepare closure.
/// \param layout A closure that defines the the layout of given action items relative to an action button.
///
///
/// returns:
/// An initialized item layout object.
- (nonnull instancetype)initWithPrepare:(void (^ _Nonnull)(JJActionItem * _Nonnull, NSInteger, NSInteger, JJFloatingActionButton * _Nonnull))prepare OBJC_DESIGNATED_INITIALIZER;
/// Returns an item preparation object that
/// <ul>
///   <li>
///     sets <code>item.alpha</code> to <code>1</code> and
///   </li>
///   <li>
///     <code>item.transform</code> to <code>identity</code>.
///   </li>
/// </ul>
///
/// returns:
/// An item preparation object.
+ (JJItemPreparation * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
/// Returns an item preparation object that
/// <ul>
///   <li>
///     sets <code>item.alpha</code> to <code>0</code> and
///   </li>
///   <li>
///     scales the item by given ratio.
///   </li>
/// </ul>
/// \param ratio The factor by which the item is scaled
///
///
/// returns:
/// An item preparation object.
+ (JJItemPreparation * _Nonnull)scaleBy:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// Returns an item preparation object that
/// <ul>
///   <li>
///     sets <code>item.alpha</code> to <code>0</code>,
///   </li>
///   <li>
///     offsets the item by given values and
///   </li>
///   <li>
///     scales the item by given ratio.
///   </li>
/// </ul>
/// \param translationX The value in points by which the item is offsetted horizontally
///
/// \param translationY The value in points by which the item is offsetted vertically
///
/// \param scale The factor by which the item is scaled
///
///
/// returns:
/// An item preparation object.
+ (JJItemPreparation * _Nonnull)offsetWithTranslationX:(CGFloat)translationX translationY:(CGFloat)translationY scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns an item preparation object that
/// remark:
/// The item is offsetted towards the closest vertical edge of the screen.
/// <ul>
///   <li>
///     sets <code>item.alpha</code> to <code>0</code>,
///   </li>
///   <li>
///     offsets the item horizontally by given values.
///   </li>
/// </ul>
/// \param distance The value in points by which the item is offsetted horizontally
/// towards the closest vertical edge of the screen.
///
/// \param scale The factor by which the item is scaled
///
///
/// returns:
/// An item preparation object.
+ (JJItemPreparation * _Nonnull)horizontalOffsetWithDistance:(CGFloat)distance scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Returns an item preparation object that
/// remark:
/// The item is offsetted towards the action button.
/// <ul>
///   <li>
///     sets <code>item.alpha</code> to <code>0</code>,
///   </li>
///   <li>
///     offsets the item horizontally by given values.
///   </li>
/// </ul>
/// \param distance The value in points by which the item is offsetted
/// towards the action button.
///
/// \param scale The factor by which the item is scaled
///
///
/// returns:
/// An item preparation object.
+ (JJItemPreparation * _Nonnull)circularOffsetWithDistance:(CGFloat)distance scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Input Source to image using Kingfisher
SWIFT_CLASS("_TtC22DoconlineTestFramework16KingfisherSource")
@interface KingfisherSource : NSObject <InputSource>
- (void)loadTo:(UIImageView * _Nonnull)imageView with:(void (^ _Nonnull)(UIImage * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework17LinearProgressBar")
@interface LinearProgressBar : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework9MRNListVC")
@interface MRNListVC : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UITableView;
@class UITableViewCell;

@interface MRNListVC (SWIFT_EXTENSION(DoconlineTestFramework)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UIWindow;
@class CAAnimation;
@class CALayer;

IB_DESIGNABLE
SWIFT_CLASS("_TtC22DoconlineTestFramework12MarqueeLabel")
@interface MarqueeLabel : UILabel <CAAnimationDelegate>
/// A boolean property that sets whether the <code>MarqueeLabel</code> should behave like a normal <code>UILabel</code>.
/// When set to <code>true</code> the <code>MarqueeLabel</code> will behave and look like a normal <code>UILabel</code>, and  will not begin any scrolling animations.
/// Changes to this property take effect immediately, removing any in-flight animation as well as any edge fade. Note that <code>MarqueeLabel</code>
/// will respect the current values of the <code>lineBreakMode</code> and <code>textAlignment</code>properties while labelized.
/// To simply prevent automatic scrolling, use the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// seealso:
/// holdScrolling
/// seealso:
/// lineBreakMode
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// warning:
/// The UILabel default setting for the <code>lineBreakMode</code> property is <code>NSLineBreakByTruncatingTail</code>, which truncates
/// the text adds an ellipsis glyph (…). Set the <code>lineBreakMode</code> property to <code>NSLineBreakByClipping</code> in order to avoid the
/// ellipsis, especially if using an edge transparency fade.
@property (nonatomic) IBInspectable BOOL labelize;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should hold (prevent) automatic label scrolling.
/// When set to <code>true</code>, <code>MarqueeLabel</code> will not automatically scroll even its text is larger than the specified frame,
/// although the specified edge fades will remain.
/// To set <code>MarqueeLabel</code> to act like a normal UILabel, use the <code>labelize</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// seealso:
/// labelize
@property (nonatomic) IBInspectable BOOL holdScrolling;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should only begin a scroll when tapped.
/// If this property is set to <code>true</code>, the <code>MarqueeLabel</code> will only begin a scroll animation cycle when tapped. The label will
/// not automatically being a scroll. This setting overrides the setting of the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>false</code>.
/// seealso:
/// holdScrolling
@property (nonatomic) IBInspectable BOOL tapToScroll;
@property (nonatomic) IBInspectable CGFloat scrollDuration;
@property (nonatomic) IBInspectable CGFloat scrollRate;
/// A buffer (offset) between the leading edge of the label text and the label frame.
/// This property adds additional space between the leading edge of the label text and the label frame. The
/// leading edge is the edge of the label text facing the direction of scroll (i.e. the edge that animates
/// offscreen first during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property affects label positioning at all times (including when <code>labelize</code> is set to <code>true</code>),
/// including when the text string length is short enough that the label does not need to scroll.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// trailingBuffer
@property (nonatomic) IBInspectable CGFloat leadingBuffer;
/// A buffer (offset) between the trailing edge of the label text and the label frame.
/// This property adds additional space (buffer) between the trailing edge of the label text and the label frame. The
/// trailing edge is the edge of the label text facing away from the direction of scroll (i.e. the edge that animates
/// offscreen last during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property has no effect when the <code>labelize</code> property is set to <code>true</code>.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// leadingBuffer
@property (nonatomic) IBInspectable CGFloat trailingBuffer;
/// The length of transparency fade at the left and right edges of the frame.
/// This propery sets the size (in points) of the view edge transparency fades on the left and right edges of a <code>MarqueeLabel</code>. The
/// transparency fades from an alpha of 1.0 (fully visible) to 0.0 (fully transparent) over this distance. Values set to this property
/// will be sanitized to prevent a fade length greater than 1/2 of the frame width.
/// Defaults to <code>0</code>.
@property (nonatomic) IBInspectable CGFloat fadeLength;
/// The length of delay in seconds that the label pauses at the completion of a scroll.
@property (nonatomic) IBInspectable CGFloat animationDelay;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a newly initialized <code>MarqueeLabel</code> instance.
/// The default scroll duration of 7.0 seconds and fade length of 0.0 are used.
/// \param frame A rectangle specifying the initial location and size of the view in its superview’s coordinates. Text (for the given font, font size, etc.) that does not fit in this frame will automatically scroll.
///
///
/// returns:
/// An initialized <code>MarqueeLabel</code> object or nil if the object couldn’t be created.
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)awakeFromNib;
- (void)prepareForInterfaceBuilder SWIFT_AVAILABILITY(ios,introduced=8.0);
- (void)layoutSubviews;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)drawLayer:(CALayer * _Nonnull)layer inContext:(CGContextRef _Nonnull)ctx;
- (void)restartForViewController:(NSNotification * _Nonnull)notification;
- (void)labelizeForController:(NSNotification * _Nonnull)notification;
- (void)animateForController:(NSNotification * _Nonnull)notification;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation, and restarts the scroll animation if the appropriate conditions are met.
/// seealso:
/// resetLabel
/// seealso:
/// triggerScrollStart
- (void)restartLabel;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation.
/// The text is immediately returned to the home position. Scrolling will not resume automatically after a call to this method.
/// To re-initiate scrolling use a call to <code>restartLabel</code> or <code>triggerScrollStart</code>, or make a change to a UILabel property such as text, bounds/frame,
/// font, font size, etc.
/// seealso:
/// restartLabel
/// seealso:
/// triggerScrollStart
- (void)shutdownLabel;
- (void)labelWasTapped:(UIGestureRecognizer * _Nonnull)recognizer;
- (UIView * _Nonnull)viewForBaselineLayout SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic, strong) UIFont * _Null_unspecified font;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic, strong) UIColor * _Nullable highlightedTextColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic) NSInteger numberOfLines;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) CGFloat minimumScaleFactor;
@property (nonatomic) UIBaselineAdjustment baselineAdjustment;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)tintColorDidChange;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL isAccessibilityElement;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework27MenuContainerViewController")
@interface MenuContainerViewController : LGSideMenuController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)leftViewWillLayoutSubviewsWithSize:(CGSize)size;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nullable)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nullable)rootViewController leftViewController:(UIViewController * _Nullable)leftViewController rightViewController:(UIViewController * _Nullable)rightViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootView:(UIView * _Nullable)rootView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootView:(UIView * _Nullable)rootView leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end










/// Activity indicator view with nice animations
SWIFT_CLASS("_TtC22DoconlineTestFramework23NVActivityIndicatorView")
@interface NVActivityIndicatorView : UIView
/// Color of activity indicator view.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull color;
/// Padding of activity indicator view.
@property (nonatomic) IBInspectable CGFloat padding;
/// Returns an object initialized from data in a given unarchiver.
/// self, initialized using the data in decoder.
/// \param decoder an unarchiver object.
///
///
/// returns:
/// self, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the natural size for the receiving view, considering only properties of the view itself.
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
///
/// returns:
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC22DoconlineTestFramework13Notifications")
@interface Notifications : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Notifications (SWIFT_EXTENSION(DoconlineTestFramework))
@property (nonatomic, copy) NSString * _Nullable created_at;
@property (nonatomic, copy) NSString * _Nullable dataObject;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic) int32_t notification_id;
@property (nonatomic, copy) NSString * _Nullable notification_type;
@property (nonatomic, copy) NSString * _Nullable read_at;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable updatedate_at;
@end

@class UICollectionView;
@class UIStoryboardSegue;

/// Controller that is able to interact and navigate through pages of a <code>PDFDocument</code>
SWIFT_CLASS("_TtC22DoconlineTestFramework17PDFViewController")
@interface PDFViewController : UIViewController
/// Collection veiw where all the pdf pages are rendered
@property (nonatomic, strong) IBOutlet UICollectionView * _Null_unspecified collectionView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarAnimation preferredStatusBarUpdateAnimation;
- (BOOL)shouldPerformSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIScrollView;

@interface PDFViewController (SWIFT_EXTENSION(DoconlineTestFramework)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface PDFViewController (SWIFT_EXTENSION(DoconlineTestFramework)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewCell;

@interface PDFViewController (SWIFT_EXTENSION(DoconlineTestFramework)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC22DoconlineTestFramework8PushData")
@interface PushData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface PushData (SWIFT_EXTENSION(DoconlineTestFramework))
@property (nonatomic, copy) NSString * _Nullable jobID;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, copy) NSString * _Nullable push_data;
@property (nonatomic, copy) NSString * _Nullable type;
@end

@class AVCaptureMetadataOutput;
@class AVMetadataObject;
@class AVCaptureConnection;

SWIFT_CLASS("_TtC22DoconlineTestFramework19QRScannerController")
@interface QRScannerController : UIViewController <AVCaptureMetadataOutputObjectsDelegate>
- (void)viewDidLoad;
- (void)captureOutput:(AVCaptureMetadataOutput * _Nonnull)output didOutputMetadataObjects:(NSArray<AVMetadataObject *> * _Nonnull)metadataObjects fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework18SimpleBarChartView")
@interface SimpleBarChartView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework17TimelineContainer")
@interface TimelineContainer : UIScrollView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC22DoconlineTestFramework17TimelinePagerView")
@interface TimelinePagerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end






SWIFT_CLASS("_TtC22DoconlineTestFramework12TimelineView")
@interface TimelineView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end





















@interface UIImage (SWIFT_EXTENSION(DoconlineTestFramework))
+ (UIImage * _Nullable)keyboardLeftImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardRightImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardUpImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardDownImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardPreviousImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextImage SWIFT_WARN_UNUSED_RESULT;
@end

















@interface UIScrollView (SWIFT_EXTENSION(DoconlineTestFramework))
/// If YES, then scrollview will ignore scrolling (simply not scroll it) for adjusting textfield position. Default is NO.
@property (nonatomic) BOOL shouldIgnoreScrollingAdjustment;
/// If YES, then scrollview will ignore content inset adjustment (simply not updating it) when keyboard is shown. Default is NO.
@property (nonatomic) BOOL shouldIgnoreContentInsetAdjustment;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) BOOL shouldRestoreScrollViewContentOffset;
@end























@interface UIView (SWIFT_EXTENSION(DoconlineTestFramework))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// If shouldIgnoreSwitchingByNextPrevious is true then library will ignore this textField/textView while moving to other textField/textView using keyboard toolbar next previous buttons. Default is false
@property (nonatomic) BOOL ignoreSwitchingByNextPrevious;
@property (nonatomic) enum IQEnableMode enableMode;
/// Override resigns Keyboard on touching outside of UITextField/View behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode shouldResignOnTouchOutsideMode;
@end




@interface UIView (SWIFT_EXTENSION(DoconlineTestFramework))
/// Returns the UIViewController object that manages the receiver.
- (UIViewController * _Nullable)viewContainingController SWIFT_WARN_UNUSED_RESULT;
/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * _Nullable)topMostController SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIViewController object that is actually the parent of this object. Most of the time it’s the viewController object which actually contains it, but result may be different if it’s viewController is added as childViewController of another viewController.
- (UIViewController * _Nullable)parentContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the superView of provided class type.
/// @param classType class type of the object which is to be search in above hierarchy and return
/// @param belowView view object in upper hierarchy where method should stop searching and return nil
- (UIView * _Nullable)superviewOfClassType:(SWIFT_METATYPE(UIView) _Nonnull)classType belowView:(UIView * _Nullable)belowView SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIView (SWIFT_EXTENSION(DoconlineTestFramework))
@property (nonatomic) IBInspectable CGFloat borderWidthForView;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable borderColorForView;
@end


@interface UIView (SWIFT_EXTENSION(DoconlineTestFramework))
/// IQToolbar references for better customization control.
@property (nonatomic, readonly, strong) IQToolbar * _Nonnull keyboardToolbar;
/// If <code>shouldHideToolbarPlaceholder</code> is YES, then title will not be added to the toolbar. Default to NO.
@property (nonatomic) BOOL shouldHideToolbarPlaceholder;
/// <code>toolbarPlaceholder</code> to override default <code>placeholder</code> text when drawing text on toolbar.
@property (nonatomic, copy) NSString * _Nullable toolbarPlaceholder;
/// <code>drawingToolbarPlaceholder</code> will be actual text used to draw on toolbar. This would either <code>placeholder</code> or <code>toolbarPlaceholder</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable drawingToolbarPlaceholder;
/// <hr/>
/// <h2>MARK: Common</h2>
- (void)addKeyboardToolbarWithTargetWithTarget:(id _Nullable)target titleText:(NSString * _Nullable)titleText rightBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)rightBarButtonConfiguration previousBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)previousBarButtonConfiguration nextBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)nextBarButtonConfiguration;
/// <hr/>
/// <h2>MARK: Right</h2>
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
/// <hr/>
/// <h2>MARK: Right/Left</h2>
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
/// <hr/>
/// <h2>MARK: Previous/Next/Right</h2>
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
@end



@interface UIViewController (SWIFT_EXTENSION(DoconlineTestFramework))
/// Present a given image picker with closures, any of the closures can be nil.
/// \param imagePicker a BSImagePickerViewController to present
///
/// \param animated To animate the presentation or not
///
/// \param select Closure to call when user selects an asset or nil
///
/// \param deselect Closure to call when user deselects an asset or nil
///
/// \param cancel Closure to call when user cancels or nil
///
/// \param finish Closure to call when user finishes or nil
///
/// \param completion presentation completed closure or nil
///
/// \param selectLimitReached Closure to call when user reaches selection limit or nil
///
- (void)bs_presentImagePickerController:(BSImagePickerViewController * _Nonnull)imagePicker animated:(BOOL)animated select:(void (^ _Nullable)(PHAsset * _Nonnull))select deselect:(void (^ _Nullable)(PHAsset * _Nonnull))deselect cancel:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull))cancel finish:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull))finish completion:(void (^ _Nullable)(void))completion selectLimitReached:(void (^ _Nullable)(NSInteger))selectLimitReached;
@end









@class NSLayoutConstraint;

@interface UIViewController (SWIFT_EXTENSION(DoconlineTestFramework))
/// This method is provided to override by viewController’s if the library lifts a viewController which you doesn’t want to lift . This may happen if you have implemented side menu feature in your app and the library try to lift the side menu controller. Overriding this method in side menu class to return correct controller should fix the problem.
- (UIViewController * _Nullable)parentIQContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
/// @deprecated    Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable IQLayoutGuideConstraint SWIFT_DEPRECATED_MSG("Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.");
@end






SWIFT_CLASS("_TtC22DoconlineTestFramework20UPCarouselFlowLayout")
@interface UPCarouselFlowLayout : UICollectionViewFlowLayout
@property (nonatomic) IBInspectable CGFloat sideItemScale;
@property (nonatomic) IBInspectable CGFloat sideItemAlpha;
@property (nonatomic) IBInspectable CGFloat sideItemShift;
- (void)prepareLayout;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
